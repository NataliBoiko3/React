import { useState } from "react"

export default function Counter(){
   // let count = 0

    // const handlePlus = () => {
    //     count++
    //     console.log(count);
    // }


    // мы вызываем функцию useState
    // передаем в скобках начальное значение для переменной 
    //в ответ  мы получаем массив из двух элементов
    // первый это сама волшебная переменная , вызывааэщая обновление
    //компонента при изменении
    //второй это фукция , перезаписывающая значение этой переменной
    //изменять переменную мы будем только с помощью этой фукции
    const [count, setCount] = useState(0)

    const handlePlus = () => {
        setCount(prev => prev + 1)
    }


const handleMinus = () => {
    setCount(prev => prev - 1)
}
    // const handlePlus = () => {
    //     console.log(count);
    // }

   
    return(
        <div className="lesson-container">
            <h4>Counter</h4>
            <div>
            <button onClick={handlePlus}>+</button> 
            </div>
            <span>{count}</span>
            <button onClick={handleMinus}>-</button>
            <p>Мы не можем хранить изменяемые данные в Реакт 
                в классических переменных,потому что мы не
                 будем видеть их изменения на странице компонент
                  не будет обновляться</p>
                  <p>В каких случаях происходит обновление данных?</p>
                  <p>Мне нужна хитрая переменная , при изменении которой 
                    будет происходить обновление компонентов
                  </p>
                  <ol>
                    <li>Изменения состояния</li>
                    <li>Изменение  props</li>
                  </ol>
                  <p> Состояние или state это особая переменная  с данными в react изменение которой
                    вызывает обновление компонента </p>
                    <p>Для создания состояния мы используем встроенную в  react функцию useState
                        Такие внутренние стандартные функции  называются хуками.Они решает разные задачи, но это всегда самые полезные 
                        и часто встречающиеся задачи. Например, хранение изменяемых данных
                    </p>
            
        </div>
    )
}